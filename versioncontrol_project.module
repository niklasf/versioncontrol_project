<?php
// $Id$
/**
 * @file
 * Version Control / Project Node integration - Integrates project nodes
 * (provided by the Project module) with version control systems supported
 * by the Version Control API.
 *
 * Copyright 2006, 2007, 2009 by Derek Wright ("dww", http://drupal.org/user/46549)
 * Copyright 2007, 2008, 2009 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

/**
 * Implementation of hook_menu().
 */
function versioncontrol_project_menu() {
  $items = array();

  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function versioncontrol_project_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->type == 'project_project') {
    switch ($op) {
      case 'load':
        versioncontrol_project_project_nodeapi_load($node);
        break;
      case 'insert':
        versioncontrol_project_project_nodeapi_insert($node);
        break;
      case 'delete':
        versioncontrol_project_project_nodeapi_delete($node);
        break;
    }
  }
}

/**
 * Load versioncontrol_project fields into project node object.
 */
function versioncontrol_project_project_nodeapi_load(&$node) {
  $result = db_fetch_object(db_query('SELECT * FROM {versioncontrol_project_projects} WHERE nid = %d', $node->nid));
  if ($result) {
    $fields = array('repo_id');
    foreach ($fields as $field) {
      $node->versioncontrol_project[$field] = $result->$field;
    }
    $node->versioncontrol_project['repo'] = versioncontrol_project_repository_load($node->nid);
  }
}

/**
 * Save versioncontrol_project information when a new project is created. 
 */
function versioncontrol_project_project_nodeapi_insert(&$node) {
  db_query("INSERT INTO {versioncontrol_project_projects} (nid, repo_id) VALUES (%d, %d)", $node->nid, 0);
}

/**
 * Delete versioncontrol_project information when a new project is deleted.
 */
function versioncontrol_project_project_nodeapi_delete(&$node) {
  db_query("DELETE FROM {versioncontrol_project_projects} WHERE nid = %d", $node->nid);
}

/**
 * Update or add repo associated with a given project.
 *
 * @param $project_id
 *   Node ID of the project.
 * @param $repo_id
 *   The repo ID of the versioncontrol repo to associate.
 */
function versioncontrol_project_set_project($project_id, $repo_id) {
  db_query("UPDATE {versioncontrol_project_projects} SET repo_id = %d WHERE nid = %d", $repo_id, $project_id);
  if (!db_affected_rows()) {
    // Didn't update anything, add this as a new project.
    db_query("INSERT INTO {versioncontrol_project_projects} (nid, repo_id) VALUES (%d, %d)", $project_id, $repo_id);
  }
}

/**
 * Load the repository object associated with a project.
 */
function versioncontrol_project_repository_load($project_id) {
  $repo_id = db_result(db_query("SELECT repo_id FROM {versioncontrol_project_projects} WHERE nid = %d", $project_id));
  if ($repo_id) {
    $repository = versioncontrol_repository_load_multiple(array($repo_id));
    return empty($repository) ? FALSE : reset($repository);
  }
  return FALSE;
}

/**
 * Load the project object associated with a repo.
 */
function versioncontrol_project_project_load($repo_id) {
  $nid = db_result(db_query("SELECT nid FROM {versioncontrol_project_projects} WHERE repo_id = %d", $repo_id));
  if ($nid) {
    return node_load($nid);
  }
  return FALSE;
}

/**
 * Implementation of hook_versioncontrol_entity_repository_delete().
 */
function versioncontrol_project_versioncontrol_entity_repository_delete($repository) {
  // Delete mapping when repo is deleted.
  $project = versioncontrol_project_project_load($repository->repo_id);
  if ($project) {
    versioncontrol_project_set_project($project->nid, 0);  
  }
}

/**
 * Implement hook_project_permission_info()
 */
function versioncontrol_project_project_permission_info($project = NULL) {
  // Make sure that we have a valid repo associated with this project, and
  // that it is using the auth plugin that we care about.
  if (!is_null($project) && $repo = versioncontrol_project_repository_load($project->nid)) {
    if (versioncontrol_project_verify_repo_auth_handler($repo)) {
      return array(
        'write to vcs' => array(
          'title' => t('Write to VCS'),
          'description' => t('Allows a user to commit or push to the repository associated with this project.'),
        ),
      );
    }
  }
}

/**
 * Implement hook_project_maintainer_save()
 */
function versioncontrol_project_project_maintainer_save($nid, $uid, $permissions = array()) {
  $repo = versioncontrol_project_repository_load($nid);
  if ($repo && versioncontrol_project_verify_repo_auth_handler($repo)) {
    $auth_handler = $repo->getAuthHandler();
    $auth_data = $auth_handler->getUserData();
    if (!isset($auth_data[$uid])) {
      $auth_data[$uid] = array(
        'branch_create' => VersioncontrolAuthHandlerMappedAccounts::DENY,
        'branch_update' => VersioncontrolAuthHandlerMappedAccounts::DENY,
        'branch_delete' => VersioncontrolAuthHandlerMappedAccounts::DENY,
        'tag_create' => VersioncontrolAuthHandlerMappedAccounts::DENY,
        'tag_update' => VersioncontrolAuthHandlerMappedAccounts::DENY,
        'tag_delete' => VersioncontrolAuthHandlerMappedAccounts::DENY,
        'per-label' => array()
      );
    }
    $auth_data[$uid]['access'] = ($permissions['write to vcs']) ? VersioncontrolAuthHandlerMappedAccounts::ALL : VersioncontrolAuthHandlerMappedAccounts::DENY;
    $auth_handler->setUserData($uid, $auth_data[$uid]);
    $auth_handler->save();
  }
}

/**
 * Implement hook_project_maintainer_remove()
 */
function versioncontrol_project_project_maintainer_remove($nid, $uid) {
  $repo = versioncontrol_project_repository_load($nid);
  if ($repo && versioncontrol_project_verify_repo_auth_handler($repo)) {
    $auth_handler = $repo->getAuthHandler();
    $auth_handler->deleteUserData($uid);
    $auth_handler->save();
  }
}

/**
 * Implement hook_project_maintainer_project_load()
 */
function versioncontrol_project_project_maintainer_project_load($nid, &$maintainers) {
  $repo = versioncontrol_project_repository_load($nid);
  if ($repo && versioncontrol_project_verify_repo_auth_handler($repo)) {
    $auth_data = $repo->getAuthHandler()->getUserData();
    if (!empty($auth_data)) {
      foreach ($auth_data as $account) {
        if (empty($maintainers[$account['uid']])) {
          $maintainers[$account['uid']]['name'] = db_result(db_query("SELECT name FROM {users} WHERE uid = %d", $account['uid']));
        }
        $maintainers[$account['uid']]['permissions']['write to vcs'] = ($account['access'] == VersioncontrolAuthHandlerMappedAccounts::ALL) ? 1 : 0;
      }
    }
  }
}

/**
 * Verify that a repo that is using a specific auth plugin.
 *
 * @param $repo
 *   A fully loaded repo
 *
 * @param $plugin
 *   (optional) The name of the plugin to check against. Defaults to 'account'
 *
 * @return bool
 *   TRUE is the auth_handler plugin matches the requested plugin, else FALSE. 
 */
function versioncontrol_project_verify_repo_auth_handler($repo, $plugin = NULL) {
  $plugin = is_null($plugin) ? 'account' : $plugin;
  return $repo && $repo->plugins['auth_handler'] == $plugin;
}

/**
 * Implementation of hook_views_api().
 */
function versioncontrol_project_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'versioncontrol_project') .'/views',
  );
}
