<?php
// $Id$
/**
 * @file
 * Version Control / Project Node Integration - Integrates project nodes
 * (provided by the Project module) with version control systems supported
 * by the Version Control API.
 *
 * Copyright 2006 by Karthik ("Zen", http://drupal.org/user/21209)
 * Copyright 2006, 2007 by Derek Wright ("dww", http://drupal.org/user/46549)
 * Copyright 2007 by Jakob Petsovits ("jpetso", http://drupal.org/user/56020)
 */

/**
 * Implementation of hook_schema().
 */
function versioncontrol_project_schema() {
  $schema['versioncontrol_project_projects'] = array(
    'description' => t('This table associates a project (given as node id) with a directory location in a version controlled repository.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The {node}.nid identifier of the project node.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'repo_id' => array(
        'description' => t('The {versioncontrol_repositories}.repo_id identifier of the repository where the project directory is located.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'directory' => array(
        'description' => t('The path of the project directory relative to the repository root, in the same format as {versioncontrol_item_revisions}.path (which means it starts with a slash and does not end with one).'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
    ),
    'indexes' => array(
      'repo_id_directory' => array('repo_id', 'directory'),
    ),
    'primary key' => array('nid'),
  );

  $schema['versioncontrol_project_comaintainers'] = array(
    'description' => t('The list of project co-maintainers. The actual maintainer is the node owner and not stored in here, (s)he will be retrieved from {node}.uid rather than from this table.'),
    'fields' => array(
      'nid' => array(
        'description' => t('The {node}.nid identifier of the project node where the user in {versioncontrol_project_comaintainers}.uid is listed as co-maintainer.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => t('The Drupal user id (referring to {users}.uid) of the co-maintainer.'),
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid', 'uid'),
  );

  return $schema;
}

/**
 * Implementation of hook_install().
 */
function versioncontrol_project_install() {
  // Create tables.
  drupal_install_schema('versioncontrol_project');
}

/**
 * Implementation of hook_uninstall().
 */
function versioncontrol_project_uninstall() {
  // Remove variables.
  db_query("DELETE FROM {variable} WHERE name LIKE 'versioncontrol_project_directory_tid_%'");
  $variables = array(
    'versioncontrol_project_restrict_commits',
    'versioncontrol_project_restrict_creation',
    'versioncontrol_project_dir_validate_by_type',
    'versioncontrol_project_validate_by_short_name',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }

  // Remove tables.
  drupal_uninstall_schema('versioncontrol_project');
}


// Update functions. To be named versioncontrol_project_update_xyzz(), where x
// is the major version of Drupal core, y is the major version of this module
// for this version of Drupal core, and zz is a consecutive number.

// versioncontrol_project_update_2() was the last update on Drupal 5.x (-2.x).

/**
 * Update 6100: Blah blah blah.
 */
/*function versioncontrol_project_update_6100() {
  $ret = array();
  $ret[] = update_sql('UPDATE {versioncontrol_project_blah}
                        SET value = othervalue');
  return $ret;
}*/
